stages:
  - test
  - docker_build
  - docker_push

.scripts:
  docker_login: >-
    docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.default_rules:
  rules:
    # allow manual builds
    - when: manual
    # never run on schedules
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # run always on master branch
    - if: '$CI_COMMIT_BRANCH = "master"'
      when: always
    # only run for non-empty branches
    - if: $CI_COMMIT_BRANCH
      changes:
        compare_to: 'refs/heads/master'
        paths:
          - '*'

variables:
  DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_PUSH: --push

services:
  - name: docker:dind
    alias: docker
    entrypoint: ["dockerd-entrypoint.sh", "--tls=false"]

lint:
  stage: test
  rules: !reference [.default_rules, rules]
  image: python:3.11-slim
  script:
    - apt-get update && apt-get install make
    - pip install poetry
    - poetry install
    - make lint

test:
  stage: test
  rules: !reference [.default_rules, rules]
  image: python:3.11-slim
  artifacts:
    reports:
      junit: report.xml
  variables:
    PYTEST_FLAGS: --junitxml report.xml
  script:
    - apt-get update && apt-get install make
    - pip install poetry
    - poetry install
    - make test

coverage:
  rules:
    - when: manual
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - '**/*.py'
        - '**/*.pyi'
        - 'pyproject.toml'
        - 'poetry.lock'
  stage: test
  image: python:3.11-slim
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  script:
    - apt-get update && apt-get install make
    - pip install poetry
    - poetry install
    - poetry run pytest --cov --cov-report term --cov-report xml:coverage.xml


amd64_build:
  stage: docker_build
  rules:
    - when: manual
    - if: '$CI_COMMIT_TAG'
  image: docker:latest
  variables:
    BUILD_ARCH: linux/amd64
    IMAGE_TAG: $CI_COMMIT_TAG
  before_script:
    - !reference [.scripts, docker_login]
  script:
    - apk add --no-cache make git
    - make container

arm64_build:
  stage: docker_build
  rules:
    - when: manual
    - if: '$CI_COMMIT_TAG'
  image: docker:latest
  variables:
    BUILD_ARCH: linux/arm64
    IMAGE_TAG: $CI_COMMIT_TAG
  before_script:
    - !reference [.scripts, docker_login]
  script:
    - apk add --no-cache qemu qemu-img git make
    - make container

docker_manifest:
  stage: docker_push
  image: docker:latest
  variables:
    BUILD_ARCH: linux/arm64
    IMAGE_TAG: $CI_COMMIT_TAG
  rules:
    - when: manual
    - if: '$CI_COMMIT_TAG'
  before_script:
    - !reference [.scripts, docker_login]
  script:
    - apk add --no-cache qemu qemu-img git make
    - make docker-manifest
